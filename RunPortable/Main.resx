<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ488BY0QrAhQC
        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
        DQlYJA8JRTMgCkFCJgs8Si0LQkUsC1VTPwpTv4wDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAA//8AAP//AAD//wAA//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/7UAAP+1AAD/tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////AAAAHwAAAB8AAAAPAAAADwAA
        AA8AAAAHgAAAB4AAAAcAAAADgAAAA4AcAAMACAABAAgAAQAIAAEAAAAAgAAAAIAAAACAAAAAgAAAAOAA
        AAD///////////////////////////////8=
</value>
  </data>
</root>