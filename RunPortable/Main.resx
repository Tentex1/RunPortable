<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA56xAAOiw
        SALkoSUX4pwaH+KbGR/imxkf4poZH+GZGB/hmRgf4ZgXH+GYFx/hlxcf4JcWH+CWFh/glRUf4JUVH+CU
        FR/flBQf35MUH9+TFB/fkxQf35MUH9+TFB/fkxQf4ZkgGOaqRgPlpj0AAAAAAAAAAAAAAAAAAAAAAP36
        8QL///8D5aUqW+OeHdbjnBjh4psY4OKbGODimhfg4poX4OGZFuDhmRbg4ZgW4OGYFeDhlxXg4JYU4OCW
        FODglRTg4JUT4OCUE+DflBLg35MS4N+TEuDfkhHg35IR4N+SEeHflBXX4ZgfXNqEAADmq0gAAAAAAAAA
        AAAAAAAA/vrxDfrszibmqC+65aMj/+y7X//vwnD/7sFv/+7Bbv/uwG7/7sBt/+6/bf/tv2z/7b5s/+2+
        a//tvmv/7b1r/+29av/tvGr/7bxq/+28af/su2n/7Ltp/+y7af/sumn/67hk/+OeKv/glRe85KQ5CuSk
        OAAAAAAAAAAAAAAAAAD9+e4Q/PThKeivO6voqzT/99+z//royf/658f/+ufG//rmxv/65sX/+ubF//rl
        xP/65cT/+uXD//nkw//55ML/+eTB//njwf/548H/+ePB//njwf/548D/+ePA//njwP/548H/7Llk/+CW
        Ft7jnikf454pAAAAAAAAAAAAAAAAAP347gj///8R6bI/deeqK//22aP/+ujJ//rnxv/658X/+ebG//jl
        xf/45cX/+OTE//jkw//45MP/+OPD//jjwv/448H/+OLB//fiwP/34sD/9+LA//fiwP/54sD/+eK+//nj
        wf/xyIP/4pob9OOfJT/inSEAAAAAAAAAAAAAAAAAAAAAAOisLADori8856ol8/PQiv/66cr/+ujH//fk
        wv/sy47/6Lxr/+e7av/numr/57pp/+e5af/nuGj/57hn/+a3Z//mt2b/5rZm/+a2Zf/mtWX/5rZn/+3L
        k//44b7/+eTB//TUnf/koSX/458iZ+GaFgD///8AAAAAAAAAAAD9+O4I/ffqE/HOfzzorSnj8Mdv//rq
        y//66sv/79Wh/+SmK//knxv/458b/+OeGv/jnRn/4pwZ/+KbGP/imhf/4ZkX/+GYFv/hlxX/4JYV/+CV
        FP/glBL/4aAx//LWqf/65MH/+N2w/+eqNv/koCCU0mMAAOu6XAAAAAAAAAAAAP347hD78twp9+O0S+q0
        NtHuv1X/++nH//vrzf/v05z/5qko/+amIv/mpiH/5qUh/+WkIP/lox//5aIf/+ShHv/koB3/458d/+Oe
        HP/jnRv/45wb/+KbGf/inB7/7cuR//rlw//647z/67VO/+WiH7zpsEMJ6bBCAAAAAAAAAAAA/fjuDvvx
        2iP56sg77LpDsO25Qf/55bz/++zO//Ldsv/osjn/6Kwl/eirJubnqiTg56kj4OeoI+DmpyLg5qYh4Oal
        IeDlpCDg5aMg4OWiH+DkoR7g5KEf6eSgHf7qwnn/+eXE//rmw//vwmr/5aQg3eerMh7nqzIAAAAAAAAA
        AAD9+O4C+/HaBP///wTsuThq7Lc1//jgq//77dD/9uXD/+q8T//rsivT6rMzMemsJR7orCYf6KslH+iq
        JB/nqSQf56gjH+enIh/mpiIf5qUhH+WkHx3nqSw65qUh3ui6X//35ML/+ufG//PPiP/nqCTz6KsuPeeq
        KgAAAAAAAAAAAP357gL78doF////BO+/SEbsuDD19tmT//vu0v/46sz/7Mdq/+24LtLvv0QV78BFAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA67hIAOy6TgborCe06LZK//Xhu//66Mf/9tqi/+mt
        Lv/orCpl6KgiAAAAAAAAAAAA/fjuDfvx2iP56sg69NaMZ+27NOvz0Xj/++/S//rt0f/v04f/770z7fDB
        PzDwwT0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyzn8A5qEAAOuyLovptTv/8tyu//vp
        yP/54rb/67U+/+mtKZHgiwAA78VlAAAAAAD9+O4Q+/HaKfnpxUX23aNn78A+2vLLX//87s3//O/T//Hc
        o//wwzv88sU9cPHFORzxwzYf8cI2H/DBNR/wwDQf78A0H++/Mx/vvjIf770yH+68MR/vvTYe7bk1lOu3
        Mv/w153/++rJ//vow//vwFb/6q8puu28TAntvEsAAAAAAP347Qj78doU+enEIvfhsS/ww0Ko8cZL//vr
        xP/88dT/9ea9//HMUf/zxzfy88Y34PLFNuDyxTXg8cQ14PHDNODxwjPg8MEz4PDAMuDwvzLg774x4O+9
        MOHvvDD27b08//Lbpf/76sr/++rJ//LLcv/rsirc7Lg7Hey4PAAAAAAAAAAAAAAAAAD///8A8cEzAPHD
        O2fxxD//+uey//zy1v/679L/9OKr//HYg//x14H/8daA//HWgP/x1X//8NR+//DUfv/w033/8NJ9//DS
        fP/v0Xv/79F7/+/Qe//x2Zn/+OnG//vryv/77Mz/9deP/+y1LvPsuDc87Lc0AAAAAAD9+O4I+/HaFPnp
        xCL34rYt885lbvLFOvj44Zv//PPY//zy1f/78dX/+vDU//rv0//679P/+u/S//rv0v/67tH/+u7R//ru
        0P/67dD/+u3P//rtz//67M7/+uzO//vtzv/77cz/++zL//vtzf/44an/7ro4/+25NGTstiwAAAAAAP34
        7hD78dop+enERffhr2D01YSL8sc98Pfcgv/89dz//PTb//z02v/89Nr//PPZ//zz2f/889j//PLX//zy
        1//88tb//PHW//zx1f/88dX//PDU//zw1P/88NP//O/T//zv0v/879H//O/S//rov//wwUb/7rsykOml
        AADyzGcA/fjuDvvx2iP56cQ79+GuU/TXkHDzy0Xa9dBR//ngjf/44ZL/+OCR//jgkf/44JD/+N+Q//jf
        j//43o//+N6O//fdjv/33Y3/992N//fcjf/33Iz/99uL//fbi//32ov/99qK//baiv/22Yr/9dR4//DA
        Ov/vvjWq8cxmA/HHUgD9+O4C+/HaBfnpxAj34K0L9NqjDfTOSGH0yz3W9Mo54fTKOeD0yjng88k44PPI
        OODzyDfg88c34PPHN+Dyxjbg8sY24PLFNeDyxDXg8cQ14PHDNODxwzTg8cIz4PHBM+DwwTLg8MAy4PDA
        MuDwvzHh8MA11vDCPVnvuRwA8s1kAAAAAAAAAAAAAAAAAAAAAAD21V8A9tZmA/XORhj0yzwf9Ms8H/TL
        PB/0yzwf9Mo7H/TKOx/zyTsf88k6H/PIOh/zyDkf88c5H/LGOR/yxjgf8sU4H/LFNx/yxDcf8cQ3H/HD
        Nh/xwzYf8cI1H/HCNR/xxD8X881dAvPLVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////wAAAHwAAAB8AAAAPAAAADwAA
        AA/AAAAPAAAADwAAAAcAAAAHAAAABwAf+AcAH/wHAAAAAwAAAAPwAAADAAAAAwAAAAMAAAABAAAAA/gA
        AAP///////////////////////////////8=
</value>
  </data>
</root>